{"version":3,"sources":["Components/Dialogs/ChatPage/ChatMessages/ChatMessages.module.css","Components/Dialogs/ChatPage/ChatInput/ChatInput.module.css","Components/Dialogs/ChatPage/ChatMessages/ChatMessages.tsx","../node_modules/@ant-design/icons-svg/es/asn/SendOutlined.js","../node_modules/@ant-design/icons/es/icons/SendOutlined.js","Components/Dialogs/ChatPage/ChatInput/ChatInput.tsx","Components/Dialogs/ChatPage/ChatPage.tsx"],"names":["module","exports","ChatMessages","MessagesArray","useState","IsAutoScroll","SetAutoScroll","MessagesAnchor","useRef","useEffect","current","scrollIntoView","behavior","className","styles","onScroll","e","elem","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","ChatMessage","userId","photo","userName","message","key","id","ref","React","memo","ProfileLink","avatar","to","src","author","content","SendOutlined","props","AntdIcon","Object","assign","icon","SendOutlinedSvg","displayName","ChatInput","WSStatus","dispatch","useDispatch","Form","useForm","form","name","onFinish","values","StartChatSagaActions","SendMessageAC","ChatInputEnterMessage","resetFields","Item","rules","required","TextArea","allowClear","placeholder","disabled","htmlType","Chat","useSelector","state","StartWsAC","CloseWSAC","style","color","Preloader","withAuthRedirect","title","CommentOutlined"],"mappings":"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","file":"static/js/4.77bbf610.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatMessage\":\"ChatMessages_ChatMessage__CGud8\",\"ChatMessages\":\"ChatMessages_ChatMessages__HLpx4\",\"CheckBox\":\"ChatMessages_CheckBox__2wX44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatInput\":\"ChatInput_ChatInput__3aZis\"};","import React, {useEffect, useRef, useState} from \"react\";\r\nimport styles from \"./ChatMessages.module.css\";\r\nimport {Avatar, Checkbox, Comment} from \"antd\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {ChatMessageType} from \"../../../../Types/Types\";\r\nimport {ChatMessageTypeWithId} from \"../../../../Redux/Reducers/ChatReducer\";\r\n\r\n\r\nexport const ChatMessages: React.FC<{ MessagesArray: Array<ChatMessageTypeWithId> }> = ({MessagesArray}) => {\r\n    const [IsAutoScroll, SetAutoScroll] = useState(true)\r\n    const MessagesAnchor = useRef<HTMLDivElement>(null)\r\n    const onScroll = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const elem = e.currentTarget\r\n        if (Math.abs((elem.scrollHeight - elem.scrollTop) - elem.clientHeight) <= 20) {\r\n            !IsAutoScroll && SetAutoScroll(true)\r\n        } else IsAutoScroll && SetAutoScroll(false)\r\n    }\r\n    useEffect(() => {\r\n        if (IsAutoScroll) MessagesAnchor.current?.scrollIntoView({behavior: 'smooth'})\r\n    }, [MessagesArray, IsAutoScroll])\r\n\r\n    return <div>\r\n        <div className={styles.ChatMessages} onScroll={onScroll}>\r\n            {MessagesArray.map((m) => <ChatMessage userId={m.userId}\r\n                                                   photo={m.photo} userName={m.userName} message={m.message}\r\n                                                   key={m.id}/>)}\r\n            <div ref={MessagesAnchor}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst ChatMessage: React.FC<ChatMessageType> = React.memo(({photo, userName, message, userId}) => {\r\n    let ProfileLink = `/profile/${userId}`\r\n    return <div className={styles.ChatMessage}>\r\n        <Comment\r\n            avatar={<NavLink to={ProfileLink}> <Avatar src={photo}/> </NavLink>}\r\n            author={<NavLink to={''}><span>{userName}</span></NavLink>}\r\n            content={<p>{message}</p>}\r\n        />\r\n    </div>\r\n})","// This icon file is generated automatically.\nvar SendOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"defs\", \"attrs\": {}, \"children\": [{ \"tag\": \"style\", \"attrs\": {} }] }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M931.4 498.9L94.9 79.5c-3.4-1.7-7.3-2.1-11-1.2a15.99 15.99 0 00-11.7 19.3l86.2 352.2c1.3 5.3 5.2 9.6 10.4 11.3l147.7 50.7-147.6 50.7c-5.2 1.8-9.1 6-10.3 11.3L72.2 926.5c-.9 3.7-.5 7.6 1.2 10.9 3.9 7.9 13.5 11.1 21.5 7.2l836.5-417c3.1-1.5 5.6-4.1 7.2-7.1 3.9-8 .7-17.6-7.2-21.6zM170.8 826.3l50.3-205.6 295.2-101.3c2.3-.8 4.2-2.6 5-5 1.4-4.2-.8-8.7-5-10.2L221.1 403 171 198.2l628 314.9-628.2 313.2z\" } }] }, \"name\": \"send\", \"theme\": \"outlined\" };\nexport default SendOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport SendOutlinedSvg from \"@ant-design/icons-svg/es/asn/SendOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar SendOutlined = function SendOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: SendOutlinedSvg\n  }));\n};\n\nSendOutlined.displayName = 'SendOutlined';\nexport default /*#__PURE__*/React.forwardRef(SendOutlined);","import {Button, Form} from \"antd\";\r\nimport React from \"react\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport styles from \"./ChatInput.module.css\"\r\nimport {CloseCircleOutlined, SendOutlined} from \"@ant-design/icons\";\r\nimport {WSStatusType} from \"../../../../Types/Types\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {StartChatSagaActions} from \"../../../../Redux/Sagas/ChatSagas\";\r\n\r\n\r\ntype PropsType = {\r\n    WSStatus: WSStatusType\r\n}\r\n\r\nexport const ChatInput: React.FC<PropsType> = ({WSStatus}) => {\r\n    const dispatch = useDispatch()\r\n    const onFinish = (values:{ChatInputEnterMessage: string}) => {\r\n        dispatch(StartChatSagaActions.SendMessageAC(values.ChatInputEnterMessage))\r\n        form.resetFields()\r\n    }\r\n    const [form] = Form.useForm();\r\n    return <Form className={styles.ChatInput} name={'ChatInput'} onFinish={onFinish} form={form}>\r\n        <Form.Item name={'ChatInputEnterMessage'} rules={[{required: true, message: 'Please input message!'}]}>\r\n            <TextArea allowClear={true} placeholder={'Enter your message...'}/>\r\n        </Form.Item>\r\n        <Form.Item>\r\n            <Button disabled={WSStatus !== 'OPENED'} htmlType={'submit'} icon={<SendOutlined/>}/>\r\n        </Form.Item>\r\n    </Form>\r\n}","import React, {useEffect} from \"react\";\r\nimport {ChatMessages} from \"./ChatMessages/ChatMessages\";\r\nimport {PageHeader} from \"antd\";\r\nimport {CommentOutlined} from \"@ant-design/icons\";\r\nimport {ChatInput} from \"./ChatInput/ChatInput\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/ReduxStore\";\r\nimport {withAuthRedirect} from \"../../../HOC/withAuthRedirect\";\r\nimport {StartChatSagaActions} from \"../../../Redux/Sagas/ChatSagas\";\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <>\r\n        <PageHeader title={<>Common chat with WebSocket!! <CommentOutlined/></>}/>\r\n        <Chat/>\r\n    </>\r\n}\r\n\r\n\r\nconst Chat = () => {\r\n    const dispatch = useDispatch()\r\n    const MessagesArray = useSelector(((state: AppStateType) => state.Chat.ChatMessages))\r\n    const WSStatus = useSelector(((state: AppStateType) => state.Chat.WSStatus))\r\n    useEffect(() => {\r\n        dispatch(StartChatSagaActions.StartWsAC())\r\n        return () => {\r\n            dispatch(StartChatSagaActions.CloseWSAC())\r\n        }\r\n    }, [dispatch])\r\n\r\n    switch (WSStatus){\r\n        case 'CLOSED':\r\n            return <div style={{color: \"red\"}}>\r\n                <Preloader/>\r\n                <b>Try to connect</b>\r\n            </div>\r\n        case 'OPENED':\r\n            return <>\r\n                <ChatMessages MessagesArray={MessagesArray}/>\r\n                <ChatInput WSStatus={WSStatus}/>\r\n            </>\r\n        case 'ERROR':\r\n            return <div style={{color: \"red\"}}>\r\n                SOME ERROR\r\n                <p>Please refresh the page</p>\r\n            </div>\r\n        case 'PENDING':\r\n            return <Preloader/>\r\n    }\r\n}\r\n\r\nexport default withAuthRedirect(ChatPage)"],"sourceRoot":""}